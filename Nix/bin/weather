#!/usr/bin/env bash

# Configuration
CONFIG_DIR="${XDG_CONFIG_HOME:-$HOME/.config}/weather"
CONFIG_FILE="${CONFIG_DIR}/config"
CACHE_FILE="${CONFIG_DIR}/cache"
CACHE_DURATION=1800 # 30 minutes

# Ensure configuration directory exists
mkdir -p "${CONFIG_DIR}"

# Check for flags
NO_CACHE=false
DEBUG=false
if [[ "$1" == "--no-cache" ]]; then
  NO_CACHE=true
elif [[ "$1" == "--debug" ]]; then
  DEBUG=true
  NO_CACHE=true
fi

# Load or create configuration
if [ -f "${CONFIG_FILE}" ]; then
  source "${CONFIG_FILE}"
else
  if ! command -v curl >/dev/null 2>&1; then
    echo "Error: curl is required but not installed" >&2
    exit 1
  fi
  CITY=$(curl -s "https://ipapi.co/city")
  if [ $? -eq 0 ] && [ -n "${CITY}" ] && [ "${CITY}" != "Undefined" ]; then
    echo "CITY=\"${CITY}\"" >"${CONFIG_FILE}"
  else
    echo "Could not detect location automatically."
    echo "Enter your city name:"
    read -r CITY
    echo "CITY=\"${CITY}\"" >"${CONFIG_FILE}"
  fi
fi

# Cross-platform stat command
get_file_mtime() {
  local file="$1"
  if [[ "$(uname)" == "Darwin" ]]; then
    stat -f %m "$file"
  else
    stat -c %Y "$file"
  fi
}

# Use cached result if valid
if [ -f "${CACHE_FILE}" ] && [ "$NO_CACHE" == "false" ]; then
  CACHE_TIME=$(get_file_mtime "${CACHE_FILE}")
  CURRENT_TIME=$(date +%s)
  if [ $((CURRENT_TIME - CACHE_TIME)) -lt "${CACHE_DURATION}" ]; then
    cat "${CACHE_FILE}"
    exit 0
  fi
fi

if ! command -v curl >/dev/null 2>&1; then
  echo "Error: curl is required but not installed" >&2
  exit 1
fi

# Function to fetch weather using JSON API
fetch_json_weather() {
  local encoded_city
  encoded_city=$(echo "$CITY" | sed 's/ /%20/g' | sed 's/,/%2C/g')

  [[ "$DEBUG" == "true" ]] && echo "Debug - Fetching JSON weather for: $CITY" >&2

  local weather_json
  weather_json=$(curl -s -f -m 15 "https://wttr.in/${encoded_city}?format=j1")
  local curl_exit=$?
  if [ $curl_exit -ne 0 ] || [ -z "$weather_json" ] || [[ "$weather_json" =~ "Unknown location" ]]; then
    [[ "$DEBUG" == "true" ]] && {
      echo "Debug - Failed to fetch JSON data (exit code: $curl_exit)" >&2
      echo "Debug - Response: ${weather_json:0:100}..." >&2
    }
    return 1
  fi

  # Extract values using jq if available, else use grep/sed
  local temp_c temp_f weather_desc local_obs_time
  if command -v jq >/dev/null 2>&1; then
    temp_c=$(echo "$weather_json" | jq -r '.current_condition[0].temp_C')
    temp_f=$(echo "$weather_json" | jq -r '.current_condition[0].temp_F')
    weather_desc=$(echo "$weather_json" | jq -r '.current_condition[0].weatherDesc[0].value')
    local_obs_time=$(echo "$weather_json" | jq -r '.current_condition[0].localObsDateTime')
  else
    local current_condition
    current_condition=$(echo "$weather_json" | grep -o '"current_condition":\[[^]]*\]' | sed 's/^"current_condition"://')
    if [ -z "$current_condition" ]; then
      [[ "$DEBUG" == "true" ]] && echo "Debug - Failed to extract current_condition array" >&2
      return 1
    fi
    temp_c=$(echo "$current_condition" | grep -o '"temp_C":"[^"]*"' | head -1 | sed 's/"temp_C":"\([^"]*\)"/\1/')
    temp_f=$(echo "$current_condition" | grep -o '"temp_F":"[^"]*"' | head -1 | sed 's/"temp_F":"\([^"]*\)"/\1/')
    weather_desc=$(echo "$current_condition" | grep -o '"weatherDesc":\[\{"value":"[^"]*"\}\]' | sed 's/.*"value":"\([^"]*\)".*/\1/')
    local_obs_time=$(echo "$current_condition" | grep -o '"localObsDateTime":"[^"]*"' | head -1 | sed 's/"localObsDateTime":"\([^"]*\)"/\1/')
  fi

  if [[ -z "$temp_c" || -z "$temp_f" ]]; then
    [[ "$DEBUG" == "true" ]] && echo "Debug - Missing temperature values" >&2
    return 1
  fi

  # Determine day/night using localObsDateTime ("YYYY-MM-DD HH:MM AM/PM")
  local hour period
  hour=$(echo "$local_obs_time" | awk '{print $2}' | cut -d: -f1)
  period=$(echo "$local_obs_time" | awk '{print $3}')
  if [[ "$period" == "PM" && "$hour" -ne 12 ]]; then
    hour=$((hour + 12))
  elif [[ "$period" == "AM" && "$hour" -eq 12 ]]; then
    hour=0
  fi
  local is_day="no"
  if ((hour >= 6 && hour < 18)); then
    is_day="yes"
  fi

  # Choose an emoji based on weather description
  local icon
  case "${weather_desc,,}" in
  *"sunny"* | *"clear"*)
    if [[ "${is_day,,}" == "yes" ]]; then
      icon="☀️"
    else
      icon="🌙"
    fi
    ;;
  *"cloud"* | *"overcast"*) icon="☁️" ;;
  *"fog"* | *"mist"*) icon="🌫️" ;;
  *"rain"* | *"drizzle"* | *"shower"*) icon="🌧️" ;;
  *"thunder"* | *"lightning"*) icon="⚡️" ;;
  *"snow"* | *"sleet"* | *"blizzard"* | *"ice"*) icon="❄️" ;;
  *) icon="🌤️" ;;
  esac

  [[ "$DEBUG" == "true" ]] && echo "Debug - Extracted from JSON - Icon: $icon, C: $temp_c, F: $temp_f, Description: $weather_desc, Local Time: $local_obs_time" >&2

  echo "${icon} ${temp_f}°F/${temp_c}°C" | tee "${CACHE_FILE}"
  return 0
}

if [ -z "$CITY" ]; then
  echo "Error: City not specified in ${CONFIG_FILE}" >&2
  exit 1
fi

[ "$NO_CACHE" == "true" ] && rm -f "${CACHE_FILE}"

if ! fetch_json_weather; then
  echo "Error: Unable to fetch weather data" >&2
  exit 1
fi
